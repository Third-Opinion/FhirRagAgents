name: CI - Build and Test Bedrock Agents

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION_9: '9.0.x'
  DOTNET_VERSION_8: '8.0.x'
  SOLUTION_PATH: 'FhirRagAgents.sln'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_9 }}

    - name: Setup .NET 8 (Lambda Runtime)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_8 }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-agents-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-agents-
          ${{ runner.os }}-nuget-

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget remove source github || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Package Bedrock Agent Lambda
      run: |
        echo "üì¶ Packaging Bedrock Agent Lambda function..."
        cd FhirRag.Agents.BedrockAgent/src/FhirRag.Agents.BedrockAgent
        dotnet lambda package --configuration Release --output-package ../../../artifacts/BedrockAgent.zip

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./coverage/**/*.xml

    - name: Upload Lambda packages
      uses: actions/upload-artifact@v4
      with:
        name: lambda-packages
        path: ./artifacts/*.zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release/**
          !**/bin/Release/**/*.pdb

  bedrock-integration-tests:
    name: Bedrock Agent Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_9 }}

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_8 }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget remove source github || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Run Bedrock agent tests
      env:
        AWS_DEFAULT_REGION: us-east-1
      run: |
        # Run tests specific to Bedrock agents
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --filter "Category=BedrockAgent" \
          --verbosity normal || echo "No Bedrock agent tests found"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_9 }}

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_8 }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget remove source github || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Check code formatting
      run: |
        dotnet format --verify-no-changes --severity error ${{ env.SOLUTION_PATH }} || {
          echo "‚ùå Code formatting issues found. Please run 'dotnet format' to fix."
          exit 1
        }

    - name: Run static analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          -p:TreatWarningsAsErrors=true \
          -p:WarningsAsErrors= \
          -p:RunAnalyzersDuringBuild=true